#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>
#include <cmath>

using namespace std;
const string ClientsFileName = "Clients.txt";
const string UsersFileName = "Users.txt";

string UserNameOfCurruntUser;

void ShowMainMenue();
void ShowTransactionsMenue();
void ShowManageUsersScreen();
void LoginScreen();

struct stClient
{
    string AccountNumber;
    string PinCode;
    string Name;
    string Phone;
    double AccountBalance;
    bool MarkForDelete = false;
};

struct stAccess
{
    string Admin;
    string Password;
    short Permission;
    bool Mark = false;
};

vector<string> SplitString(string S1, string Delim)
{

    vector<string> vString;

    short pos = 0;
    string sWord; // define a string variable  

    // use find() function to get the position of the delimiters  
    while ((pos = S1.find(Delim)) != std::string::npos)
    {
        sWord = S1.substr(0, pos); // store the word   
        if (sWord != "")
        {
            vString.push_back(sWord);
        }

        S1.erase(0, pos + Delim.length());  /* erase() until positon and move to next word. */
    }

    if (S1 != "")
    {
        vString.push_back(S1); // it adds last word of the string.
    }

    return vString;

}

stClient ConvertLinetoRecord(string Line, string Seperator = "#//#")
{

    stClient Client;
    vector<string> vClientData;

    vClientData = SplitString(Line, Seperator);

    Client.AccountNumber = vClientData[0];
    Client.PinCode = vClientData[1];
    Client.Name = vClientData[2];
    Client.Phone = vClientData[3];
    Client.AccountBalance = stod(vClientData[4]);//cast string to double


    return Client;

}

string ConvertRecordToLine(stClient Client, string Seperator = "#//#")
{

    string stClientRecord = "";

    stClientRecord += Client.AccountNumber + Seperator;
    stClientRecord += Client.PinCode + Seperator;
    stClientRecord += Client.Name + Seperator;
    stClientRecord += Client.Phone + Seperator;
    stClientRecord += to_string(Client.AccountBalance);

    return stClientRecord;

}

bool ClientExistsByAccountNumber(string AccountNumber, string FileName)
{

    vector <stClient> vClients;

    fstream MyFile;
    MyFile.open(FileName, ios::in);//read Mode

    if (MyFile.is_open())
    {

        string Line;
        stClient Client;

        while (getline(MyFile, Line))
        {

            Client = ConvertLinetoRecord(Line);
            if (Client.AccountNumber == AccountNumber)
            {
                MyFile.close();
                return true;
            }


            vClients.push_back(Client);
        }

        MyFile.close();

    }

    return false;


}

stClient ReadNewClient()
{
    stClient Client;

    cout << "Enter Account Number? ";

    // Usage of std::ws will extract allthe whitespace character
    getline(cin >> ws, Client.AccountNumber);

    while (ClientExistsByAccountNumber(Client.AccountNumber, ClientsFileName))
    {
        cout << "\nClient with [" << Client.AccountNumber << "] already exists, Enter another Account Number? ";
        getline(cin >> ws, Client.AccountNumber);
    }


    cout << "Enter PinCode? ";
    getline(cin, Client.PinCode);

    cout << "Enter Name? ";
    getline(cin, Client.Name);

    cout << "Enter Phone? ";
    getline(cin, Client.Phone);

    cout << "Enter AccountBalance? ";
    cin >> Client.AccountBalance;

    return Client;

}

vector <stClient> LoadCleintsDataFromFile(string FileName)
{

    vector <stClient> vClients;

    fstream MyFile;
    MyFile.open(FileName, ios::in);//read Mode

    if (MyFile.is_open())
    {

        string Line;
        stClient Client;

        while (getline(MyFile, Line))
        {

            Client = ConvertLinetoRecord(Line);

            vClients.push_back(Client);
        }

        MyFile.close();

    }

    return vClients;

}

void PrintClientRecordLine(stClient Client)
{

    cout << "| " << setw(15) << left << Client.AccountNumber;
    cout << "| " << setw(10) << left << Client.PinCode;
    cout << "| " << setw(40) << left << Client.Name;
    cout << "| " << setw(12) << left << Client.Phone;
    cout << "| " << setw(12) << left << Client.AccountBalance;

}

void PrintClientRecordBalanceLine(stClient Client)
{

    cout << "| " << setw(15) << left << Client.AccountNumber;
    cout << "| " << setw(40) << left << Client.Name;
    cout << "| " << setw(12) << left << Client.AccountBalance;

}

void ShowAllClientsScreen()
{


    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);

    cout << "\n\t\t\t\t\tClient List (" << vClients.size() << ") Client(s).";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    cout << "| " << left << setw(15) << "Accout Number";
    cout << "| " << left << setw(10) << "Pin Code";
    cout << "| " << left << setw(40) << "Client Name";
    cout << "| " << left << setw(12) << "Phone";
    cout << "| " << left << setw(12) << "Balance";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    if (vClients.size() == 0)
        cout << "\t\t\t\tNo Clients Available In the System!";
    else

        for (stClient Client : vClients)
        {

            PrintClientRecordLine(Client);
            cout << endl;
        }

    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

}

void ShowTotalBalances()
{

    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);

    cout << "\n\t\t\t\t\tBalances List (" << vClients.size() << ") Client(s).";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    cout << "| " << left << setw(15) << "Accout Number";
    cout << "| " << left << setw(40) << "Client Name";
    cout << "| " << left << setw(12) << "Balance";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    double TotalBalances = 0;

    if (vClients.size() == 0)
        cout << "\t\t\t\tNo Clients Available In the System!";
    else

        for (stClient Client : vClients)
        {

            PrintClientRecordBalanceLine(Client);
            TotalBalances += Client.AccountBalance;

            cout << endl;
        }

    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;
    cout << "\t\t\t\t\t   Total Balances = " << TotalBalances;

}

void PrintClientCard(stClient Client)
{
    cout << "\nThe following are the client details:\n";
    cout << "-----------------------------------";
    cout << "\nAccout Number: " << Client.AccountNumber;
    cout << "\nPin Code     : " << Client.PinCode;
    cout << "\nName         : " << Client.Name;
    cout << "\nPhone        : " << Client.Phone;
    cout << "\nAccount Balance: " << Client.AccountBalance;
    cout << "\n-----------------------------------\n";

}

bool FindClientByAccountNumber(string AccountNumber, vector <stClient> vClients, stClient& Client)
{

    for (stClient C : vClients)
    {

        if (C.AccountNumber == AccountNumber)
        {
            Client = C;
            return true;
        }

    }
    return false;

}

stClient ChangeClientRecord(string AccountNumber)
{
    stClient Client;

    Client.AccountNumber = AccountNumber;

    cout << "\n\nEnter PinCode? ";
    getline(cin >> ws, Client.PinCode);

    cout << "Enter Name? ";
    getline(cin, Client.Name);

    cout << "Enter Phone? ";
    getline(cin, Client.Phone);

    cout << "Enter AccountBalance? ";
    cin >> Client.AccountBalance;

    return Client;

}

bool MarkClientForDeleteByAccountNumber(string AccountNumber, vector <stClient>& vClients)
{

    for (stClient& C : vClients)
    {

        if (C.AccountNumber == AccountNumber)
        {
            C.MarkForDelete = true;
            return true;
        }

    }

    return false;

}

vector <stClient> SaveCleintsDataToFile(string FileName, vector <stClient> vClients)
{

    fstream MyFile;
    MyFile.open(FileName, ios::out);//overwrite

    string DataLine;

    if (MyFile.is_open())
    {

        for (stClient C : vClients)
        {

            if (C.MarkForDelete == false)
            {
                //we only write records that are not marked for delete.  
                DataLine = ConvertRecordToLine(C);
                MyFile << DataLine << endl;

            }

        }

        MyFile.close();

    }

    return vClients;

}

void AddDataLineToFile(string FileName, string  stDataLine)
{
    fstream MyFile;
    MyFile.open(FileName, ios::out | ios::app);

    if (MyFile.is_open())
    {

        MyFile << stDataLine << endl;

        MyFile.close();
    }

}

void AddNewClient()
{
    stClient Client;
    Client = ReadNewClient();
    AddDataLineToFile(ClientsFileName, ConvertRecordToLine(Client));

}

void AddNewClients()
{
    char AddMore = 'Y';
    do
    {
        //system("cls");
        cout << "Adding New Client:\n\n";

        AddNewClient();
        cout << "\nClient Added Successfully, do you want to add more clients? Y/N? ";


        cin >> AddMore;

    } while (toupper(AddMore) == 'Y');

}

bool DeleteClientByAccountNumber(string AccountNumber, vector <stClient>& vClients)
{

    stClient Client;
    char Answer = 'n';

    if (FindClientByAccountNumber(AccountNumber, vClients, Client))
    {

        PrintClientCard(Client);

        cout << "\n\nAre you sure you want delete this client? y/n ? ";
        cin >> Answer;
        if (Answer == 'y' || Answer == 'Y')
        {
            MarkClientForDeleteByAccountNumber(AccountNumber, vClients);
            SaveCleintsDataToFile(ClientsFileName, vClients);

            //Refresh Clients 
            vClients = LoadCleintsDataFromFile(ClientsFileName);

            cout << "\n\nClient Deleted Successfully.";
            return true;
        }

    }
    else
    {
        cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
        return false;
    }

}

bool UpdateClientByAccountNumber(string AccountNumber, vector <stClient>& vClients)
{

    stClient Client;
    char Answer = 'n';

    if (FindClientByAccountNumber(AccountNumber, vClients, Client))
    {

        PrintClientCard(Client);
        cout << "\n\nAre you sure you want update this client? y/n ? ";
        cin >> Answer;
        if (Answer == 'y' || Answer == 'Y')
        {

            for (stClient& C : vClients)
            {
                if (C.AccountNumber == AccountNumber)
                {
                    C = ChangeClientRecord(AccountNumber);
                    break;
                }

            }

            SaveCleintsDataToFile(ClientsFileName, vClients);

            cout << "\n\nClient Updated Successfully.";
            return true;
        }

    }
    else
    {
        cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
        return false;
    }

}

bool DepositBalanceToClientByAccountNumber(string AccountNumber, double Amount, vector <stClient>& vClients)
{


    char Answer = 'n';


    cout << "\n\nAre you sure you want perfrom this transaction? y/n ? ";
    cin >> Answer;
    if (Answer == 'y' || Answer == 'Y')
    {

        for (stClient& C : vClients)
        {
            if (C.AccountNumber == AccountNumber)
            {
                C.AccountBalance += Amount;
                SaveCleintsDataToFile(ClientsFileName, vClients);
                cout << "\n\nDone Successfully. New balance is: " << C.AccountBalance;

                return true;
            }

        }


        return false;
    }

}

string ReadClientAccountNumber()
{
    string AccountNumber = "";

    cout << "\nPlease enter AccountNumber? ";
    cin >> AccountNumber;
    return AccountNumber;

}

void ShowDeleteClientScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tDelete Client Screen";
    cout << "\n-----------------------------------\n";

    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
    string AccountNumber = ReadClientAccountNumber();
    DeleteClientByAccountNumber(AccountNumber, vClients);

}

void ShowUpdateClientScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tUpdate Client Info Screen";
    cout << "\n-----------------------------------\n";

    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
    string AccountNumber = ReadClientAccountNumber();
    UpdateClientByAccountNumber(AccountNumber, vClients);

}

void ShowAddNewClientsScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tAdd New Clients Screen";
    cout << "\n-----------------------------------\n";

    AddNewClients();

}

void ShowFindClientScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tFind Client Screen";
    cout << "\n-----------------------------------\n";

    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
    stClient Client;
    string AccountNumber = ReadClientAccountNumber();
    if (FindClientByAccountNumber(AccountNumber, vClients, Client))
        PrintClientCard(Client);
    else
        cout << "\nClient with Account Number[" << AccountNumber << "] is not found!";

}

void ShowDepositScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tDeposit Screen";
    cout << "\n-----------------------------------\n";


    stClient Client;

    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
    string AccountNumber = ReadClientAccountNumber();


    while (!FindClientByAccountNumber(AccountNumber, vClients, Client))
    {
        cout << "\nClient with [" << AccountNumber << "] does not exist.\n";
        AccountNumber = ReadClientAccountNumber();
    }


    PrintClientCard(Client);

    double Amount = 0;
    cout << "\nPlease enter deposit amount? ";
    cin >> Amount;

    DepositBalanceToClientByAccountNumber(AccountNumber, Amount, vClients);

}

void ShowWithDrawScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tWithdraw Screen";
    cout << "\n-----------------------------------\n";

    stClient Client;

    vector <stClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
    string AccountNumber = ReadClientAccountNumber();


    while (!FindClientByAccountNumber(AccountNumber, vClients, Client))
    {
        cout << "\nClient with [" << AccountNumber << "] does not exist.\n";
        AccountNumber = ReadClientAccountNumber();
    }

    PrintClientCard(Client);

    double Amount = 0;
    cout << "\nPlease enter withdraw amount? ";
    cin >> Amount;

    //Validate that the amount does not exceeds the balance
    while (Amount > Client.AccountBalance)
    {
        cout << "\nAmount Exceeds the balance, you can withdraw up to : " << Client.AccountBalance << endl;
        cout << "Please enter another amount? ";
        cin >> Amount;
    }

    DepositBalanceToClientByAccountNumber(AccountNumber, Amount * -1, vClients);

}

void ShowTotalBalancesScreen()
{
    ShowTotalBalances();
}

enum enTransactionsMenueOptions { eDeposit = 1, eWithdraw = 2, eShowTotalBalance = 3, eShowMainMenue = 4 };

enum enMainMenueOptions { eInvalideChoice = 0, eListClients = 1, eAddNewClient = 2, eDeleteClient = 3, eUpdateClient = 4, eFindClient = 5, eShowTransactionsMenue = 6, eMangeUsers = 7, eLogout = 8 };

enum enManageUsers { eListUsers = 1, eAddNewUser = 2, eDeleteUser = 3, eUpdateUser = 4, eFindUser = 5, eMainMenue = 6 };

void GoBackToMainMenue()
{
    cout << "\n\nPress any key to go back to Main Menue...";
    system("pause>0");
    ShowMainMenue();
}
void GoBackToTransactionsMenue()
{
    cout << "\n\nPress any key to go back to Transactions Menue...";
    system("pause>0");
    ShowTransactionsMenue();
}
short ReadTransactionsMenueOption()
{
    cout << "Choose what do you want to do? [1 to 4]? ";
    short Choice = 0;
    cin >> Choice;

    return Choice;
}

void PerfromTranactionsMenueOption(enTransactionsMenueOptions TransactionMenueOption)
{
    switch (TransactionMenueOption)
    {
    case enTransactionsMenueOptions::eDeposit:
    {
        system("cls");
        ShowDepositScreen();
        GoBackToTransactionsMenue();
        break;
    }
    case enTransactionsMenueOptions::eWithdraw:
    {
        system("cls");
        ShowWithDrawScreen();
        GoBackToTransactionsMenue();
        break;
    }
    case enTransactionsMenueOptions::eShowTotalBalance:
    {
        system("cls");
        ShowTotalBalancesScreen();
        GoBackToTransactionsMenue();
        break;
    }
    case enTransactionsMenueOptions::eShowMainMenue:
    {
        ShowMainMenue();
    }
    }
}

void ShowTransactionsMenue()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tTransactions Menue Screen\n";
    cout << "===========================================\n";
    cout << "\t[1] Deposit.\n";
    cout << "\t[2] Withdraw.\n";
    cout << "\t[3] Total Balances.\n";
    cout << "\t[4] Main Menue.\n";
    cout << "===========================================\n";
    PerfromTranactionsMenueOption((enTransactionsMenueOptions)ReadTransactionsMenueOption());
}

struct stOptions
{
    char ShowClientList, AddNewClient, DeleteClient, UpdateClient, FindClient, Transaction, ManageUsers;
};

stOptions ReadAccessOptions()
{
    stOptions Option;
    cout << "Do You Want To Give Access To :\n\n";

    cout << "Show Client List? Y/N?";
    cin >> Option.ShowClientList;

    cout << "Add New Client? Y/N?";
    cin >> Option.AddNewClient;

    cout << "Delete Client? Y/N?";
    cin >> Option.DeleteClient;

    cout << "Update Client? Y/N?";
    cin >> Option.UpdateClient;

    cout << "Find Client? Y/N?";
    cin >> Option.FindClient;

    cout << "Transaction? Y/N?";
    cin >> Option.Transaction;

    cout << "Manage Users? Y/N?";
    cin >> Option.ManageUsers;

    return Option;
}

short CalcualteBinaryValue(stOptions Options)
{
    short BinaryValue = 0;
    short BinaryNumberSystemBase = 2;

    if (toupper(Options.ShowClientList) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eListClients - 1);

    if (toupper(Options.AddNewClient) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eAddNewClient - 1);

    if (toupper(Options.DeleteClient) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eDeleteClient - 1);

    if (toupper(Options.UpdateClient) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eUpdateClient - 1);

    if (toupper(Options.FindClient) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eFindClient - 1);

    if (toupper(Options.Transaction) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eShowTransactionsMenue - 1);

    if (toupper(Options.ManageUsers) == 'Y')
        BinaryValue += pow(BinaryNumberSystemBase, (short)enMainMenueOptions::eMangeUsers - 1);

    return BinaryValue;
}

bool FindUserByUserName(string UserName, vector <stAccess> vUsers, stAccess& User)
{

    for (stAccess U : vUsers)
    {

        if (U.Admin == UserName)
        {
            User = U;
            return true;
        }

    }
    return false;

}
stAccess ConvertLinetoRecordUsers(string Line, string Seperator = "#//#")
{

    stAccess User;
    vector<string> vUserData;

    vUserData = SplitString(Line, Seperator);

    User.Admin = vUserData[0];
    User.Password = vUserData[1];
    User.Permission = stoi(vUserData[2]);

    return User;

}

vector <stAccess>LoadUsersDataFromFile(string FileName)
{

    vector <stAccess> vUsers;

    fstream MyFile;
    MyFile.open(FileName, ios::in);//read Mode

    if (MyFile.is_open())
    {

        string Line;
        stAccess User;

        while (getline(MyFile, Line))
        {

            User = ConvertLinetoRecordUsers(Line);

            vUsers.push_back(User);
        }

        MyFile.close();

    }

    return vUsers;

}

short UserPermissionValue()
{
    stAccess User;
    vector <stAccess> vUsers = LoadUsersDataFromFile(UsersFileName);
    FindUserByUserName(UserNameOfCurruntUser, vUsers, User);
    return User.Permission;
}

vector<short> vGetBitwiseNumber()
{
    short BitwiseValue, RemainderValue;
    vector <short> vRemainder;
    stAccess User;

    User.Permission = UserPermissionValue();

    while (User.Permission != 0)
    {
        BitwiseValue = User.Permission % 2;
        vRemainder.push_back(BitwiseValue);
        User.Permission /= 2;
    }

    /* (17) / 2 = 8 [1]
       (8) / 2 = 4  [0]
       (4) / 2 = 2  [0]
       (2) / 2 = 1  [0]
       (1) / 2 = 0  [1]*/

    return vRemainder;
}


vector<short> vGetPermissionOptions()
{
    vector <short> vOptions;
    vector<short> GetBitwiseNumber = vGetBitwiseNumber();
    short Counter = 0;

    for (short& Value : GetBitwiseNumber)
    {
        Counter++;

        if (Value == 1)
            vOptions.push_back(Counter);
    }

    return vOptions;
}

bool IsFullAccess()
{
    return UserPermissionValue() == -1;
}

short ReadMainMenueOption()
{
    cout << "Choose what do you want to do? [1 to 7]? ";
    short Choice = 0;
    cin >> Choice;

    if (IsFullAccess)
        return Choice;

    vector <short> vOptions = vGetPermissionOptions();

    for (short& Value : vOptions)
    {
        if (Choice == Value)
            return Choice;
    }

    Choice = 0;
    return Choice;
}

short ReadManageUsersOption()
{
    cout << "Choose what do you want to do? [1 to 6]? ";
    short Choice = 0;
    cin >> Choice;

    return Choice;
}

void PrintUserRecordLine(stAccess User)
{

    cout << "| " << setw(15) << left << User.Admin;
    cout << "| " << setw(40) << left << User.Password;
    cout << "| " << setw(12) << left << User.Permission;

}

void ShowUsersList()
{

    vector <stAccess> vUsers = LoadUsersDataFromFile(UsersFileName);

    cout << "\n\t\t\t\t\tUsers List (" << vUsers.size() << ") User(s).";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    cout << "| " << left << setw(15) << "User Name";
    cout << "| " << left << setw(40) << "Password";
    cout << "| " << left << setw(12) << "Permissions";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

    if (vUsers.size() == 0)
        cout << "\t\t\t\tNo Users Available In the System!";

    for (stAccess User : vUsers)
    {

        PrintUserRecordLine(User);
        cout << endl;
    }

    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;

}

bool ClientExistsByUserName(string UserName, string FileName)
{

    vector <stAccess> vAccess;

    fstream MyFile;
    MyFile.open(FileName, ios::in);//read Mode

    if (MyFile.is_open())
    {

        string Line;
        stAccess User;

        while (getline(MyFile, Line))
        {

            User = ConvertLinetoRecordUsers(Line);
            if (User.Admin == UserName)
            {
                MyFile.close();
                return true;
            }


            vAccess.push_back(User);
        }

        MyFile.close();

    }

    return false;


}

stAccess GiveAccessOrNot(stAccess User)
{
    char ValidateAccess;
    cout << "\n\nDo You Want To Give Full Access? y/n?";
    cin >> ValidateAccess;

    if (toupper(ValidateAccess) == 'Y')
        User.Permission = -1;
    else
        User.Permission = CalcualteBinaryValue(ReadAccessOptions());

    return User;
}

stAccess ReadNewUser()
{
    stAccess User;

    cout << "Enter User Name? ";

    // Usage of std::ws will extract allthe whitespace character
    getline(cin >> ws, User.Admin);

    while (ClientExistsByUserName(User.Admin, UsersFileName))
    {
        cout << "\nUser with [" << User.Admin << "] already exists, Enter another User Name? ";
        getline(cin >> ws, User.Admin);
    }

    cout << "Enter Password? ";
    getline(cin, User.Password);

    User = GiveAccessOrNot(User);

    return User;
}

string ConvertRecordToLineUsers(stAccess User, string Seperator = "#//#")
{

    string stUserRecord = "";

    stUserRecord += User.Admin + Seperator;
    stUserRecord += User.Password + Seperator;
    stUserRecord += to_string(User.Permission);

    return stUserRecord;

}

void AddNewUser()
{
    stAccess User;
    User = ReadNewUser();
    AddDataLineToFile(UsersFileName, ConvertRecordToLineUsers(User));
}

void ShowAddNewUsers()
{
    cout << "\n-----------------------------------\n";
    cout << "\tAdd New User Screen";
    cout << "\n-----------------------------------\n";

    char AddMore = 'Y';
    do
    {
        //system("cls");
        cout << "Adding New User:\n\n";

        AddNewUser();
        cout << "\nUser Added Successfully, do you want to add more Users? Y/N? ";


        cin >> AddMore;

    } while (toupper(AddMore) == 'Y');

}

void PrintUserCard(stAccess User)
{
    cout << "\nThe following are the User details:\n";
    cout << "-----------------------------------";
    cout << "\nUser Name : " << User.Admin;
    cout << "\nPassword  : " << User.Password;
    cout << "\nPermission: " << User.Permission;
    cout << "\n-----------------------------------\n";

}

bool MarkUserForDeleteByUserName(string UserName, vector <stAccess>& vUsers)
{

    for (stAccess& U : vUsers)
    {

        if (U.Admin == UserName)
        {
            U.Mark = true;
            return true;
        }

    }

    return false;

}

vector <stAccess> SaveUsersDataToFile(string FileName, vector <stAccess> vUsers)
{

    fstream MyFile;
    MyFile.open(FileName, ios::out);//overwrite

    string DataLine;

    if (MyFile.is_open())
    {

        for (stAccess U : vUsers)
        {

            if (U.Mark == false)
            {
                //we only write records that are not marked for delete.  
                DataLine = ConvertRecordToLineUsers(U);
                MyFile << DataLine << endl;

            }

        }

        MyFile.close();

    }

    return vUsers;

}

bool DeleteUserByUserName(string UserName, vector <stAccess>& vUsers)
{

    stAccess User;
    char Answer = 'n';

    if (FindUserByUserName(UserName, vUsers, User))
    {

        PrintUserCard(User);

        cout << "\n\nAre you sure you want delete this User? y/n ? ";
        cin >> Answer;
        if (Answer == 'y' || Answer == 'Y')
        {
            MarkUserForDeleteByUserName(UserName, vUsers);
            SaveUsersDataToFile(UsersFileName, vUsers);

            //Refresh Clients 
            vUsers = LoadUsersDataFromFile(UsersFileName);

            cout << "\n\nUser Deleted Successfully.";
            return true;
        }

    }
    else
    {
        cout << "\nUser with User Name (" << UserName << ") is Not Found!";
        return false;
    }

}

string ReadUserName()
{
    string UserName = "";

    cout << "\nPlease enter User Name? ";
    cin >> UserName;
    return UserName;

}

void ShowDeleteUserScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tDelete User Screen";
    cout << "\n-----------------------------------\n";

    vector <stAccess> vUsers = LoadUsersDataFromFile(UsersFileName);
    string UserName = ReadUserName();
    DeleteUserByUserName(UserName, vUsers);

}

void ShowFindUserScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tFind User Screen";
    cout << "\n-----------------------------------\n";
    vector <stAccess> vUsers = LoadUsersDataFromFile(UsersFileName);
    stAccess User;
    string UserName = ReadUserName();
    if (FindUserByUserName(UserName, vUsers, User))
        PrintUserCard(User);
    else
        cout << "\nUser with User Name[" << UserName << "] is not found!";
}

stAccess ChangeUserRecord(string UserName)
{
    stAccess User;

    User.Admin = UserName;

    cout << "\n\nEnter Password? ";
    getline(cin >> ws, User.Password);

    User = GiveAccessOrNot(User);

    return User;

}

bool UpdateUserByUserName(string UserName, vector <stAccess>& vUsers)
{

    stAccess User;
    char Answer = 'n';

    if (FindUserByUserName(UserName, vUsers, User))
    {

        PrintUserCard(User);
        cout << "\n\nAre you sure you want update this User? y/n ? ";
        cin >> Answer;
        if (Answer == 'y' || Answer == 'Y')
        {

            for (stAccess& C : vUsers)
            {
                if (C.Admin == UserName)
                {
                    C = ChangeUserRecord(UserName);
                    break;
                }

            }

            SaveUsersDataToFile(UsersFileName, vUsers);

            cout << "\n\nUser Updated Successfully.";
            return true;
        }

    }
    else
    {
        cout << "\nUser with User Name (" << UserName << ") is Not Found!";
        return false;
    }

}



void ShowUpdateUserScreen()
{
    cout << "\n-----------------------------------\n";
    cout << "\tUpdate User Screen";
    cout << "\n-----------------------------------\n";

    vector <stAccess> vUsers = LoadUsersDataFromFile(UsersFileName);
    string UserName = ReadUserName();
    UpdateUserByUserName(UserName, vUsers);

}

void GoBackToMangeUsersMenue()
{
    cout << "\nPress any key to go back to Mange Users Menue...";
    system("pause>0");
    ShowManageUsersScreen();
}

void PerformMangeUsersOption(enManageUsers MangeUsersOption)
{

    switch (MangeUsersOption)
    {
    case enManageUsers::eListUsers:
        system("cls");
        ShowUsersList();
        GoBackToMangeUsersMenue();
        break;
    case enManageUsers::eAddNewUser:
        system("cls");
        ShowAddNewUsers();
        GoBackToMangeUsersMenue();
        break;
    case enManageUsers::eDeleteUser:
        system("cls");
        ShowDeleteUserScreen();
        GoBackToMangeUsersMenue();
        break;
    case enManageUsers::eUpdateUser:
        system("cls");
        ShowUpdateUserScreen();
        GoBackToMangeUsersMenue();
        break;
    case enManageUsers::eFindUser:
        system("cls");
        ShowFindUserScreen();
        GoBackToMangeUsersMenue();
        break;
    case enManageUsers::eMainMenue:
        system("cls");
        ShowMainMenue();
        break;
    }
}

void ShowManageUsersScreen()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tManage Users Menue Screen\n";
    cout << "===========================================\n";
    cout << "\t[1] List Users.\n";
    cout << "\t[2] Add New User.\n";
    cout << "\t[3] Delete User.\n";
    cout << "\t[4] Update User.\n";
    cout << "\t[5] Find User.\n";
    cout << "\t[6] Main Menue.\n";
    cout << "===========================================\n";
    PerformMangeUsersOption((enManageUsers)ReadManageUsersOption());

}

void InvalidChoice()
{
    system("cls");
    cout << "------------------------------------------\n";
    cout << "Access Denied,\n";
    cout << "You Don't Have Permission To Do this,\n";
    cout << "Please Conact Your Admin.\n";
    cout << "------------------------------------------\n\n";
    GoBackToMainMenue();
}

enMainMenueOptions ValidateMainMainMenue(enMainMenueOptions MainMenueOption)
{
    if (MainMenueOption == enMainMenueOptions::eInvalideChoice)
        return MainMenueOption;
    else
    {
        vector <short> vOptions = vGetPermissionOptions();

        for (short& SelectOption : vOptions)
        {
            if ((short)MainMenueOption == SelectOption)
            {
                MainMenueOption = (enMainMenueOptions)SelectOption;
                return MainMenueOption;
            }
        }
    }
}

void PerfromMainMenueOption(enMainMenueOptions MainMenueOption)
{
    if (!IsFullAccess())
        MainMenueOption = ValidateMainMainMenue(MainMenueOption);

    switch (MainMenueOption)
    {
    case enMainMenueOptions::eListClients:

        system("cls");
        ShowAllClientsScreen();
        GoBackToMainMenue();
        break;

    case enMainMenueOptions::eAddNewClient:
        system("cls");
        ShowAddNewClientsScreen();
        GoBackToMainMenue();
        break;

    case enMainMenueOptions::eDeleteClient:
        system("cls");
        ShowDeleteClientScreen();
        GoBackToMainMenue();
        break;

    case enMainMenueOptions::eUpdateClient:
        system("cls");
        ShowUpdateClientScreen();
        GoBackToMainMenue();
        break;

    case enMainMenueOptions::eFindClient:
        system("cls");
        ShowFindClientScreen();
        GoBackToMainMenue();
        break;

    case enMainMenueOptions::eShowTransactionsMenue:
        system("cls");
        ShowTransactionsMenue();
        break;

    case enMainMenueOptions::eMangeUsers:
        system("cls");
        ShowManageUsersScreen();
        break;

    case enMainMenueOptions::eLogout:
        system("cls");
        LoginScreen();
        break;

    default:
        InvalidChoice();
        break;
    }


}

void ShowMainMenue()
{
    system("cls");
    cout << "===========================================\n";
    cout << "\t\tMain Menue Screen\n";
    cout << "===========================================\n";
    cout << "\t[1] Show Client List.\n";
    cout << "\t[2] Add New Client.\n";
    cout << "\t[3] Delete Client.\n";
    cout << "\t[4] Update Client Info.\n";
    cout << "\t[5] Find Client.\n";
    cout << "\t[6] Transactions.\n";
    cout << "\t[7] Mange Users.\n";
    cout << "\t[8] Logout.\n";
    cout << "===========================================\n";
    PerfromMainMenueOption((enMainMenueOptions)ReadMainMenueOption());
}

bool IsValidOnSystem(stAccess User)
{
    vector <stAccess> vValidOnSystemContent = LoadUsersDataFromFile(UsersFileName);

    short Counter = 0;

    for (stAccess A : vValidOnSystemContent)
    {

        if (A.Password == User.Password)
            Counter++;

        if (A.Admin == User.Admin)
            Counter++;
    }
    return Counter == 2;
}

stAccess GetUserInfo()
{
    stAccess User;

    cout << "Enter UserName?";
    cin >> User.Admin;
    cout << "Enter Password?";
    cin >> User.Password;

    return User;
}
void ShowLoginScreen()
{
    cout << "===========================================\n";
    cout << "\t\tLogin Screen\n";
    cout << "===========================================\n";
}

void WelcomMessage()
{
    system("cls");
    ShowLoginScreen();
    cout << "Username & Password Are Right !\n\n";
    cout << "Welcome to Our Bank System Program.\n";
    cout << "\n\n\n\n\n\n\n\Press any key to go to Main Menue...";
    system("pause>0");
}

void InvalidUsername_Password(stAccess User)
{
    while (!IsValidOnSystem(User))
    {
        system("cls");
        ShowLoginScreen();
        cout << "Invalid Username/Password!\n";
        User = GetUserInfo();
        if (IsValidOnSystem(User))
        {
            WelcomMessage();
            ShowMainMenue();
            break;
        }
    }
};

void LoginScreen()
{
    ShowLoginScreen();
    stAccess User = GetUserInfo();
    UserNameOfCurruntUser = User.Admin;

    if (IsValidOnSystem(User))
    {
        WelcomMessage();
        ShowMainMenue();
    }
    else
        InvalidUsername_Password(User);
}

int main()
{
    LoginScreen();
    system("pause>0");
    return 0;
}
